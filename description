Client:
The client initiates a connection to the server by creating a socket object by making use of the socket module. 
The connection between the client and server is made by specifying the host IPv4 address and the creation of a randomized port number.
On establishment of the connection, the client receives a welcome message from the server. 
The client receives the questions from the server by using a for-loop and decodes the question from byte to string format, using the decode() function of the socket module. 
The client then has up to 5 seconds to answer the question. 
If the client fails to answer within the specified time, or answers incorrectly, he doesn’t receive any points for the question. 
Else his score his incremented. 
The client’s response is encoded from string to byte using the encode() function of the socket modules and sent to the server.
At the end of the quiz, the client receives his score.

Server:
The server has a list of questions and the respective answers. 
The server creates a socket object and binds it to a port using the socket and bind functions respectively. 
The server listens to incoming connections from clients using listen function. 
We’ve defined a function called handle_client which is used to handle the receiving client.
Once the connection is established, the server sends a welcome message which is encoded from string to byte form using the encode() function of the socket module. 
This helps confirm the connection between client and server.
The server then sends the question to the client by looping through the list of pre-defined questions. 
Upon sending the questions, the server starts the timer which we have implemented using the time module and is saved using a start_time variable.
The timer keeps running until the client has sent a response, upon which the timer is stopped. 
If the difference between end and start times is greater than 5 seconds, then the server sends a message conveying that his time has run out. 
If the client provides a correct answer, a certain score variable is incremented, else it remains the same. 
The loop runs until the list of questions is exhausted, upon which the score variable is displayed and sent to the client over the socket.
